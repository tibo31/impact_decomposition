all_OE <- NULL
all_DE <- NULL
all_NE <- NULL
all_TE <- NULL
IE_mat <- matrix(0, n, n)
OE_mat <- matrix(0, n, n)
DE_mat <- matrix(0, n, n)
NE_mat <- matrix(0, n, n)
TE_mat <- matrix(0, n, n)
beta_o <- 0.05
beta_i = 0.01
beta_d <- 0.1
gamma_od <-  -0.5
ind_o_num <- rep(1:8, each = 8)
ind_d_num <- rep(1:8, times = 8)
x_o <- kronecker(x, rep(1, n))
x_d <- kronecker(rep(1, n), x)
x_i = ifelse(ind_o_num == ind_d_num, x_o, 0)
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g))
Y_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + gamma_od * g))
Y_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_d * beta_d + gamma_od * g))
diff_tot <- matrix(0, n, n)
local_effect <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
local_effect_2nd <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
# Model_3
for (k in 1:8) {
x_new <- numeric(8)
x_new[k] <- 1
x_new <- x + x_new
x_o_new <- kronecker(x_new, rep(1, n))
x_d_new <- kronecker(rep(1, n), x_new)
x_i_new = ifelse(ind_o_num == ind_d_num, x_o_new, 0)
Y_new <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + x_d_new * beta_d + gamma_od * g))
diff_new <- t(matrix(Y_new - Y, n, n))
Y_new_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + gamma_od * g))
diff_new_1 <- t(matrix(Y_new_1 - Y_1, n, n))
Y_new_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_d_new * beta_d + gamma_od * g))
diff_new_2 <- t(matrix(Y_new_2 - Y_2, n, n))
# local impact
local_effect_temp <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(diff_new),
model_1 = as.vector(diff_new_1),
model_2 = as.vector(diff_new_2))
local_effect_temp_2nd <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(t(diff_new)),
model_1 = as.vector(t(diff_new_1)),
model_2 = as.vector(t(diff_new_2)))
local_effect <- rbind(local_effect, local_effect_temp)
diff_tot <- diff_tot + diff_new
varname <- paste0("effect_", k)
IE <- IE + diff_new[k, k]
OE <- OE + sum(diff_new[k, ]) - diff_new[k, k]
DE <- DE + sum(diff_new[, k]) - diff_new[k, k]
NE <- NE + sum(diff_new[!((1:8) %in% k), !((1:8) %in% k)])
all_IE <- c(all_IE, diff_new[k, k])
all_OE <- c(all_OE, diff_new[k, !((1:8) %in% k)])
all_DE <- c(all_DE, diff_new[!((1:8) %in% k), k])
all_NE <- c(all_NE, as.numeric(diff_new[!((1:8) %in% k), !((1:8) %in% k)]))
all_TE <- c(all_TE, as.numeric(diff_new))
IE_mat[k, k] <- IE_mat[k, k] + diff_new[k, k]
OE_mat[k, !((1:8) %in% k)] <- OE_mat[k, !((1:8) %in% k)]  + diff_new[k, !((1:8) %in% k)]
DE_mat[!((1:8) %in% k), k] <- DE_mat[!((1:8) %in% k), k] + diff_new[!((1:8) %in% k), k]
NE_mat[!((1:8) %in% k), !((1:8) %in% k)] <- NE_mat[!((1:8) %in% k), !((1:8) %in% k)]  +
diff_new[!((1:8) %in% k), !((1:8) %in% k)]
TE_mat <- TE_mat + diff_new
}
local_effect %>%
group_by(site, type) %>%
summarise(values = sum(values)) %>%
pivot_wider(names_from = "type", values_from = "values")
coeff_x_log <- data.frame(row.names = "x", beta_o = 0.05, beta_d = 0.1, beta_i = 0.01,
delta_o = 0, delta_d = 0)
pred_sq_log <- exp(predict_gsim(coeff_x_log, rho, alpha = 0, omega_vec = gamma_od * g,
OW = w, DW = w, OX = X, DX = X,
ind_o = index_o, ind_d = index_d))
sq_log <- compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
sq_log
beta_i
coeff_x_log
beta_o
beta_d
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g))
cbind(Y, pred_sq_log)
x_i_new
# Computing the effects :
IE <- 0
OE <- 0
DE <- 0
NE <- 0
TE <- 0
all_IE <- NULL
all_OE <- NULL
all_DE <- NULL
all_NE <- NULL
all_TE <- NULL
IE_mat <- matrix(0, n, n)
OE_mat <- matrix(0, n, n)
DE_mat <- matrix(0, n, n)
NE_mat <- matrix(0, n, n)
TE_mat <- matrix(0, n, n)
beta_o <- 0.05
beta_i = 0.01
beta_d <- 0.1
gamma_od <-  -0.5
ind_o_num <- rep(1:8, each = 8)
ind_d_num <- rep(1:8, times = 8)
x_o <- kronecker(x, rep(1, n))
x_d <- kronecker(rep(1, n), x)
x_i = ifelse(ind_o_num == ind_d_num, x_o, 0)
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g))
Y_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + gamma_od * g))
Y_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_d * beta_d + gamma_od * g))
diff_tot <- matrix(0, n, n)
local_effect <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
local_effect_2nd <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
# Model_3
for (k in 1:8) {
x_new <- numeric(8)
x_new[k] <- 1
x_new <- x + x_new
x_o_new <- kronecker(x_new, rep(1, n))
x_d_new <- kronecker(rep(1, n), x_new)
x_i_new = ifelse(ind_o_num == ind_d_num, x_o_new, 0)
Y_new <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + x_d_new * beta_d + gamma_od * g))
diff_new <- t(matrix(Y_new - Y, n, n))
Y_new_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + gamma_od * g))
diff_new_1 <- t(matrix(Y_new_1 - Y_1, n, n))
Y_new_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_d_new * beta_d + gamma_od * g))
diff_new_2 <- t(matrix(Y_new_2 - Y_2, n, n))
# local impact
local_effect_temp <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(diff_new),
model_1 = as.vector(diff_new_1),
model_2 = as.vector(diff_new_2))
local_effect_temp_2nd <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(t(diff_new)),
model_1 = as.vector(t(diff_new_1)),
model_2 = as.vector(t(diff_new_2)))
local_effect <- rbind(local_effect, local_effect_temp)
diff_tot <- diff_tot + diff_new
varname <- paste0("effect_", k)
IE <- IE + diff_new[k, k]
OE <- OE + sum(diff_new[k, ]) - diff_new[k, k]
DE <- DE + sum(diff_new[, k]) - diff_new[k, k]
NE <- NE + sum(diff_new[!((1:8) %in% k), !((1:8) %in% k)])
all_IE <- c(all_IE, diff_new[k, k])
all_OE <- c(all_OE, diff_new[k, !((1:8) %in% k)])
all_DE <- c(all_DE, diff_new[!((1:8) %in% k), k])
all_NE <- c(all_NE, as.numeric(diff_new[!((1:8) %in% k), !((1:8) %in% k)]))
all_TE <- c(all_TE, as.numeric(diff_new))
IE_mat[k, k] <- IE_mat[k, k] + diff_new[k, k]
OE_mat[k, !((1:8) %in% k)] <- OE_mat[k, !((1:8) %in% k)]  + diff_new[k, !((1:8) %in% k)]
DE_mat[!((1:8) %in% k), k] <- DE_mat[!((1:8) %in% k), k] + diff_new[!((1:8) %in% k), k]
NE_mat[!((1:8) %in% k), !((1:8) %in% k)] <- NE_mat[!((1:8) %in% k), !((1:8) %in% k)]  +
diff_new[!((1:8) %in% k), !((1:8) %in% k)]
TE_mat <- TE_mat + diff_new
}
local_effect %>%
group_by(site, type) %>%
summarise(values = sum(values)) %>%
pivot_wider(names_from = "type", values_from = "values")
sq_log
coeff_x_log
source("/media/laurent/00E4-7FC9/decomposition/codes/compute_effects_cartesian.R")
compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
change_z
source("/media/laurent/00E4-7FC9/decomposition/codes/compute_effects_cartesian.R")
compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
coeff_x_log
source("/media/laurent/00E4-7FC9/decomposition/codes/compute_effects_cartesian.R")
sq_log <- compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
sq_log
source("/media/laurent/00E4-7FC9/decomposition/codes/compute_effects_cartesian.R")
sq_log <- compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
sq_log
x_o <- kronecker(x, rep(1, n))
x_d <- kronecker(rep(1, n), x)
x_i = ifelse(ind_o_num == ind_d_num, x_o, 0)
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g +
delta_o * W_o %*% x_o + delta_d * W_d %*% x_d))
Y_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + gamma_od * g))
Y_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_d * beta_d + gamma_od * g))
diff_tot <- matrix(0, n, n)
# Computing the effects :
IE <- 0
OE <- 0
DE <- 0
NE <- 0
TE <- 0
all_IE <- NULL
all_OE <- NULL
all_DE <- NULL
all_NE <- NULL
all_TE <- NULL
IE_mat <- matrix(0, n, n)
OE_mat <- matrix(0, n, n)
DE_mat <- matrix(0, n, n)
NE_mat <- matrix(0, n, n)
TE_mat <- matrix(0, n, n)
beta_o <- 0.05
beta_i = 0.01
beta_d <- 0.1
delta_o <- 0.05
delta_d <- 0.1
gamma_od <-  -0.5
ind_o_num <- rep(1:8, each = 8)
ind_d_num <- rep(1:8, times = 8)
x_o <- kronecker(x, rep(1, n))
x_d <- kronecker(rep(1, n), x)
x_i = ifelse(ind_o_num == ind_d_num, x_o, 0)
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g +
delta_o * W_o %*% x_o + delta_d * W_d %*% x_d))
Y_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + gamma_od * g))
Y_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_d * beta_d + gamma_od * g))
diff_tot <- matrix(0, n, n)
local_effect <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
local_effect_2nd <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
# Model_3
for (k in 1:8) {
x_new <- numeric(8)
x_new[k] <- 1
x_new <- x + x_new
x_o_new <- kronecker(x_new, rep(1, n))
x_d_new <- kronecker(rep(1, n), x_new)
x_i_new = ifelse(ind_o_num == ind_d_num, x_o_new, 0)
Y_new <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + x_d_new * beta_d + gamma_od * g +
delta_o * W_o %*% x_o_new + delta_d * W_d %*% x_d_new))
diff_new <- t(matrix(Y_new - Y, n, n))
Y_new_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + gamma_od * g))
diff_new_1 <- t(matrix(Y_new_1 - Y_1, n, n))
Y_new_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_d_new * beta_d + gamma_od * g))
diff_new_2 <- t(matrix(Y_new_2 - Y_2, n, n))
# local impact
local_effect_temp <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(diff_new),
model_1 = as.vector(diff_new_1),
model_2 = as.vector(diff_new_2))
local_effect_temp_2nd <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(t(diff_new)),
model_1 = as.vector(t(diff_new_1)),
model_2 = as.vector(t(diff_new_2)))
local_effect <- rbind(local_effect, local_effect_temp)
diff_tot <- diff_tot + diff_new
varname <- paste0("effect_", k)
IE <- IE + diff_new[k, k]
OE <- OE + sum(diff_new[k, ]) - diff_new[k, k]
DE <- DE + sum(diff_new[, k]) - diff_new[k, k]
NE <- NE + sum(diff_new[!((1:8) %in% k), !((1:8) %in% k)])
all_IE <- c(all_IE, diff_new[k, k])
all_OE <- c(all_OE, diff_new[k, !((1:8) %in% k)])
all_DE <- c(all_DE, diff_new[!((1:8) %in% k), k])
all_NE <- c(all_NE, as.numeric(diff_new[!((1:8) %in% k), !((1:8) %in% k)]))
all_TE <- c(all_TE, as.numeric(diff_new))
IE_mat[k, k] <- IE_mat[k, k] + diff_new[k, k]
OE_mat[k, !((1:8) %in% k)] <- OE_mat[k, !((1:8) %in% k)]  + diff_new[k, !((1:8) %in% k)]
DE_mat[!((1:8) %in% k), k] <- DE_mat[!((1:8) %in% k), k] + diff_new[!((1:8) %in% k), k]
NE_mat[!((1:8) %in% k), !((1:8) %in% k)] <- NE_mat[!((1:8) %in% k), !((1:8) %in% k)]  +
diff_new[!((1:8) %in% k), !((1:8) %in% k)]
TE_mat <- TE_mat + diff_new
}
local_effect %>%
group_by(site, type) %>%
summarise(values = sum(values)) %>%
pivot_wider(names_from = "type", values_from = "values")
# Computing the effects :
IE <- 0
OE <- 0
DE <- 0
NE <- 0
TE <- 0
all_IE <- NULL
all_OE <- NULL
all_DE <- NULL
all_NE <- NULL
all_TE <- NULL
IE_mat <- matrix(0, n, n)
OE_mat <- matrix(0, n, n)
DE_mat <- matrix(0, n, n)
NE_mat <- matrix(0, n, n)
TE_mat <- matrix(0, n, n)
beta_o <- 0.05
beta_i = 0.01
beta_d <- 0.1
delta_o <- 0.02
delta_d <- 0.05
gamma_od <-  -0.5
ind_o_num <- rep(1:8, each = 8)
ind_d_num <- rep(1:8, times = 8)
x_o <- kronecker(x, rep(1, n))
x_d <- kronecker(rep(1, n), x)
x_i = ifelse(ind_o_num == ind_d_num, x_o, 0)
Y <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + x_d * beta_d + gamma_od * g +
delta_o * W_o %*% x_o + delta_d * W_d %*% x_d))
Y_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_o * beta_o + gamma_od * g))
Y_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i * beta_i + x_d * beta_d + gamma_od * g))
diff_tot <- matrix(0, n, n)
local_effect <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
local_effect_2nd <- data.frame(site = character(), flow = character(),
type = character(), values = numeric(),
model_1 = numeric(), model_2 = numeric())
# Model_3
for (k in 1:8) {
x_new <- numeric(8)
x_new[k] <- 1
x_new <- x + x_new
x_o_new <- kronecker(x_new, rep(1, n))
x_d_new <- kronecker(rep(1, n), x_new)
x_i_new = ifelse(ind_o_num == ind_d_num, x_o_new, 0)
Y_new <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + x_d_new * beta_d + gamma_od * g +
delta_o * W_o %*% x_o_new + delta_d * W_d %*% x_d_new))
diff_new <- t(matrix(Y_new - Y, n, n))
Y_new_1 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_o_new * beta_o + gamma_od * g))
diff_new_1 <- t(matrix(Y_new_1 - Y_1, n, n))
Y_new_2 <- exp(solve(diag(N) - rho_o * W_o - rho_d * W_d - rho_w * W_w,
x_i_new * beta_i + x_d_new * beta_d + gamma_od * g))
diff_new_2 <- t(matrix(Y_new_2 - Y_2, n, n))
# local impact
local_effect_temp <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(diff_new),
model_1 = as.vector(diff_new_1),
model_2 = as.vector(diff_new_2))
local_effect_temp_2nd <- data.frame(
site = paste0("s", k),
flow = paste0("s", rep(1:8, each = 8), "-s", rep(1:8, times = 8)),
type = ifelse(ind_o_num == k & ind_d_num == k, "intra",
ifelse(ind_o_num == k & ind_d_num != k, "origin",
ifelse(ind_d_num == k & ind_o_num != k, "destination", "network"))),
values = as.vector(t(diff_new)),
model_1 = as.vector(t(diff_new_1)),
model_2 = as.vector(t(diff_new_2)))
local_effect <- rbind(local_effect, local_effect_temp)
diff_tot <- diff_tot + diff_new
varname <- paste0("effect_", k)
IE <- IE + diff_new[k, k]
OE <- OE + sum(diff_new[k, ]) - diff_new[k, k]
DE <- DE + sum(diff_new[, k]) - diff_new[k, k]
NE <- NE + sum(diff_new[!((1:8) %in% k), !((1:8) %in% k)])
all_IE <- c(all_IE, diff_new[k, k])
all_OE <- c(all_OE, diff_new[k, !((1:8) %in% k)])
all_DE <- c(all_DE, diff_new[!((1:8) %in% k), k])
all_NE <- c(all_NE, as.numeric(diff_new[!((1:8) %in% k), !((1:8) %in% k)]))
all_TE <- c(all_TE, as.numeric(diff_new))
IE_mat[k, k] <- IE_mat[k, k] + diff_new[k, k]
OE_mat[k, !((1:8) %in% k)] <- OE_mat[k, !((1:8) %in% k)]  + diff_new[k, !((1:8) %in% k)]
DE_mat[!((1:8) %in% k), k] <- DE_mat[!((1:8) %in% k), k] + diff_new[!((1:8) %in% k), k]
NE_mat[!((1:8) %in% k), !((1:8) %in% k)] <- NE_mat[!((1:8) %in% k), !((1:8) %in% k)]  +
diff_new[!((1:8) %in% k), !((1:8) %in% k)]
TE_mat <- TE_mat + diff_new
}
local_effect %>%
group_by(site, type) %>%
summarise(values = sum(values)) %>%
pivot_wider(names_from = "type", values_from = "values")
coeff_x_log <- data.frame(row.names = "x", beta_o = 0.05, beta_d = 0.1, beta_i = 0.01,
delta_o = 0.02, delta_d = 0.05)
pred_sq_log <- exp(predict_gsim(coeff_x_log, rho, alpha = 0, omega_vec = gamma_od * g,
OW = w, DW = w, OX = X, DX = X,
ind_o = index_o, ind_d = index_d))
sq_log <- compute_effect(coeff_x_log, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)
sq_log
N
sq
compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = rep(1, N))
coeff_x
compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d)
microbenchmark::microbenchmark(
no_log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d)},
log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)}
)
microbenchmark::microbenchmark(
no_log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d)},
log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = pred_sq_log)}
)
n = 50
n <- vec_n[k]
N <- n ^ 2
w <- matrix(0, n, n, byrow = T)
site <- paste0("s", 1:n)
dimnames(w) <- list(site, site)
for(i in 2:(n-1)) {
w[i, i-1] <- 0.5
w[i, i+1] <- 0.5
}
w[1, 2] <- 1
w[n, n-1] <- 1
index_o <- paste0("s", rep(1:n, each = n))
index_d <- paste0("s", rep(1:n, times = n))
X <- data.frame(x = rbinom(n, 100, 0.5))
rownames(X) <- site
long <- 1:n
lat <- rep(1, n)
g <- as.vector(as.matrix(log(dist(cbind(long, lat)))))
N
microbenchmark::microbenchmark(
no_log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d)},
log = {compute_effect(coeff_x, rho, OW = w, DW = w,
ind_o = index_o, ind_d = index_d,
Y_in_log = T, hat_y = rep(1, N))},
times = 5
)
coeff_x <- data.frame(row.names = c("x1", "x2"),
beta_o = c(0.5, 0.3),
beta_d = c(1, 2),
beta_i = c(2, 1.5),
delta_o = c(0.1, 0.05),
delta_d = c(0.3, 0.35))
#### Square case
# cartesian case
pred_sq <- predict_gsim(coeff_x, rho, alpha = alpha, omega_vec = gamma_od * g,
OW = w, DW = w, OX = X, DX = X,
ind_o = index_o, ind_d = index_d)
coeff_x
X
rm(list = ls())
